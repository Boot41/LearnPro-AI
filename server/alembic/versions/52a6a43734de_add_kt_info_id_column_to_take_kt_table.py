"""add kt_info_id column to take_kt table

Revision ID: 52a6a43734de
Revises: b20bcac6058f
Create Date: 2025-03-14 16:06:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '52a6a43734de'
down_revision: Union[str, None] = 'b20bcac6058f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if the table exists
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    
    # Only proceed if the table exists
    if 'take_kt' in tables:
        columns = [col['name'] for col in inspector.get_columns('take_kt')]
        
        # Add status column if it doesn't exist
        if 'status' not in columns:
            op.add_column('take_kt', sa.Column('status', sa.String(), nullable=False, server_default='Pending'))
        
        # Add created_at column if it doesn't exist
        if 'created_at' not in columns:
            op.add_column('take_kt', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP')))
        
        # Add updated_at column if it doesn't exist
        if 'updated_at' not in columns:
            op.add_column('take_kt', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
        
        # Handle kt_info to kt_info_id rename or add if needed
        if 'kt_info' in columns and 'kt_info_id' not in columns:
            # SQLite doesn't support column rename directly, so we need to use batch operations
            with op.batch_alter_table('take_kt') as batch_op:
                batch_op.alter_column('kt_info', new_column_name='kt_info_id')
        elif 'kt_info_id' not in columns:
            op.add_column('take_kt', sa.Column('kt_info_id', sa.Integer(), nullable=True))
            
            # Create foreign key if it doesn't exist
            fk_name = 'fk_take_kt_kt_info_id'
            foreign_keys = inspector.get_foreign_keys('take_kt')
            fk_exists = any(fk['name'] == fk_name for fk in foreign_keys)
            
            if not fk_exists:
                op.create_foreign_key(
                    fk_name, 'take_kt', 'kt_info', ['kt_info_id'], ['id']
                )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    
    if 'take_kt' in tables:
        columns = [col['name'] for col in inspector.get_columns('take_kt')]
        
        # Drop columns if they exist
        if 'updated_at' in columns:
            op.drop_column('take_kt', 'updated_at')
        
        if 'created_at' in columns:
            op.drop_column('take_kt', 'created_at')
        
        if 'status' in columns:
            op.drop_column('take_kt', 'status')
        
        # Handle kt_info_id to kt_info rename
        if 'kt_info_id' in columns:
            # Check if foreign key exists and drop it
            foreign_keys = inspector.get_foreign_keys('take_kt')
            for fk in foreign_keys:
                if 'kt_info_id' in fk['constrained_columns']:
                    op.drop_constraint(fk['name'], 'take_kt', type_='foreignkey')
            
            # Rename column back
            with op.batch_alter_table('take_kt') as batch_op:
                batch_op.alter_column('kt_info_id', new_column_name='kt_info')
    
    # ### end Alembic commands ###
